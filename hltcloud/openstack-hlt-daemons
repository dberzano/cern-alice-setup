#!/bin/bash -e
export LANG=C
set -o pipefail

function os_date() {
  date +%Y%m%d-%H%M%S
}

function os_echo() {
  echo -e "\033[34m$1\033[m" >&2
}

function os_error() {
  echo -e "\033[31m$1\033[m" >&2
}

function os_run() {
  local RET=0
  echo -e "\033[36m[$(_d)] executing: \033[35m$@\033[36m\033[m" >&2
  "$@" || RET=$?
  [[ $RET == 0 ]] \
    && echo -e "\033[32m[$(_d)] finished OK\033[m" >&2 \
    || { echo -e "\033[31m[$(_d)] finished with errors: $r, aborting\033[m" >&2; exit $RET; }
}

function os_pids_dnsmasq() {
  ps -e -o user,pid,command | (grep '/var/lib/nova/networks' || true) | \
                              (grep ^nobody || true)                  | \
                              (grep -v grep || true)                  | \
                              awk '{ print $2 }'
}

function os_status() {
  local RET=0
  local SERV=$1
  local PIDS=
  systemctl status $SERV > /dev/null 2>&1 || RET=$?
  [[ $RET == 0 ]] && echo -en "\033[34m[\033[32m up \033[34m] $SERV" >&2 \
                  || echo -en "\033[34m[\033[31mdown\033[34m] $SERV" >&2
  if [[ $SERV == 'openstack-nova-network' ]] ; then
    PIDS=$(os_pids_dnsmasq)
    [[ "$PIDS" ]] && echo -n " (dnsmasq: $PIDS)" >&2 || true
  fi
  echo -e "\033[m"
}

function os_kill_dnsmasq() {
  PIDS=$(os_pids_dnsmasq)
  [[ "$PIDS" ]] && kill -15 "$PIDS" || true
}

[[ $(whoami) == root ]] || { os_echo "You must be root. Exiting."; false; }

TYPE=headnode
[[ $(hostname -s) != cn* ]] || TYPE=worker
os_echo "You are on an OpenStack $TYPE."
case $TYPE in
  headnode) AUX=(mysqld qpidd)
            AUTH=(openstack-keystone)
            GLANCE=(openstack-glance-api openstack-glance-registry)
            NEUTRON=(neutron-server neutron-metadata-agent        \
                     neutron-openvswitch-agent neutron-dhcp-agent \
                     neutron-l3-agent openvswitch)
            NOVA=(openstack-nova-api openstack-nova-cert              \
                  openstack-nova-consoleauth openstack-nova-scheduler \
                  openstack-nova-conductor openstack-nova-novncproxy)
            NOVANET=() ;;
  worker)   AUX=(libvirtd dbus)
            AUTH=()
            GLANCE=()
            NEUTRON=(neutron-openvswitch-agent openvswitch)
            NOVA=(openstack-nova-compute)
            NOVANET=(openstack-nova-network openstack-nova-metadata-api) ;;
esac

SERVICES=()
while [[ $# -gt 0 ]]; do
  case $1 in
    --all)     SERVICES+=(${AUX[@]} ${AUTH[@]} ${GLANCE[@]}
                          ${NOVANET[@]} ${NOVA[@]})         ;;
    --aux)     SERVICES+=(${AUX[@]})                        ;;
    --glance)  SERVICES+=(${GLANCE[@]})                     ;;
    --neutron) SERVICES+=(${NEUTRON[@]})                    ;;
    --novanet) SERVICES+=(${NOVANET[@]})                    ;;
    --nova)    SERVICES+=(${NOVA[@]})                       ;;
    --*)       os_error "Option $1 not recognized."
               false                                        ;;
    *)         ACTION=$1                                    ;;
  esac
  shift
done

[[ "${SERVICES[*]}" ]] || SERVICES+=(${AUTH[@]} ${GLANCE[@]} ${NOVANET[@]} ${NOVA[@]})
SERVICES=($(echo "${SERVICES[@]}" | sed -e 's/ /\n/g' | sort -u))

for SRV in "${SERVICES[@]}"; do
  case $ACTION in
    start|restart)
      echo -en "\033[34m[\033[35m....\033[34m] $SRV\033[m" >&2
      [[ $SRV == 'openstack-nova-network' ]] && os_kill_dnsmasq
      systemctl restart $SRV
      [[ $SRV == 'openstack-nova-network' ]] && sleep 5 || sleep 1
      echo -en '\r' >&2
      os_status $SRV
      ;;
    stop)
      echo -en "\033[34m[\033[35m....\033[34m] $SRV\033[m" >&2
      [[ $SRV == 'openstack-nova-network' ]] && os_kill_dnsmasq
      systemctl stop $SRV
      echo -en '\r' >&2
      os_status $SRV
      ;;
    disable|enable)
      os_echo "$ACTION $SRV"
      systemctl $ACTION $SRV
      ;;
    status)
      os_status $SRV
      ;;
  esac
done
if [[ $ACTION == status && $TYPE == worker ]]; then
  ni=$( (virsh list 2> /dev/null||true) | (grep -cE '\s+instance-'||true) )
  os_echo "number of instances: \033[32m$ni"
  nc=$(grep -c bogomips /proc/cpuinfo)
  os_echo "number of cores: \033[32m$nc"
  rammb=$(free -m | grep -E '^Mem:' | awk '{ print $2 }')
  os_echo "RAM memory (megabytes): \033[32m$rammb"
  rammbpercore=$((rammb/nc))
  os_echo "RAM memory per core (megabytes): \033[32m$rammbpercore"
  nlv=$(lvs --noheadings nova | wc -l)
  os_echo "LVM partitions for VMs (vg=nova): \033[32m$nlv"
fi || true
